// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

// generator erd {
//   provider = "prisma-erd-generator"
//   theme = "forest"
// }

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  things             Thing[]
  applications        ThingApplication[]
  favorites           FavoriteThing[]
  payments            Payment[]
  supportRequests     SupportRequest[]
  administeredThings ThingAdministrator[]
  reviews             ThingReview[]

  profile             Profile?
}

model Profile {
  id            String      @id @default(cuid())
  userId        String      @unique
  phoneNumber   String?
  address       String?
  city          String?
  state         String?
  zip           String?
  country       String?

  user          User        @relation(fields: [userId], references: [id])
}

model Category {
  id            String      @id @default(cuid())
  name          String      @unique
  description   String
  slug          String      @unique
  things       Thing[]
}

enum ThingRate {
  DAILY
  WEEKLY
  MONTHLY
}

enum ThingStatus {
  AVAILABLE
  UNAVAILABLE
}

model Thing {
  id            String      @id @default(cuid())
  ownerId       String
  title         String
  description   String
  location      String
  equipmentType String

  rate          Float
  rateType      ThingRate   @default(DAILY)

  quantity      Int         @default(0)

  slug          String      @unique
  status        ThingStatus @default(AVAILABLE)

  reviews       ThingReview[]
  images        ThingImage[]
  category      Category[]
  owner         User     @relation(fields: [ownerId], references: [id])
  applications  ThingApplication[]
  favorites     FavoriteThing[]
  supportRequests SupportRequest[]

  administrators ThingAdministrator[]

  updatedAt     DateTime    @updatedAt
  createdAt     DateTime    @default(now())

  @@index([ownerId])
  @@fulltext([title, description, location])
}

model ThingReview {
  id            String      @id @default(cuid())
  thingId       String
  renterId      String
  rating        Int
  review        String
  reviewDate    DateTime    @default(now())

  thing         Thing    @relation(fields: [thingId], references: [id])
  renter         User      @relation(fields: [renterId], references: [id])

  @@index([thingId])
  @@index([renterId])
}

enum ThingApplicationStatus {
  PENDING
  CANCELED
  REJECTED
  WAITING_PAYMENT
  PAID
  WAITING_PICKUP
  PICKED_UP
  WAITING_RETURN
  RETURNED
}

model ThingApplication {
  id                  String       @id @default(cuid())
  thingId             String
  renterId            String
  status              ThingApplicationStatus  @default(PENDING)
  applicationDate     DateTime    @default(now())
  updatedDate         DateTime    @updatedAt
  startDate           DateTime
  endDate             DateTime

  quantity            Int

  message             String

  supportingDocuments ThingApplicationDocument[]
  payments            Payment[]

  thing               Thing    @relation(fields: [thingId], references: [id])
  renter              User      @relation(fields: [renterId], references: [id])

  @@index([thingId])
  @@index([renterId])
}

model ThingApplicationDocument {
  id            String      @id @default(cuid())
  applicationId String
  url           String
  caption       String

  createdAt     DateTime    @default(now())

  application   ThingApplication    @relation(fields: [applicationId], references: [id])

  @@index([applicationId])
}

model ThingImage {
  id            String      @id @default(cuid())
  thingId       String
  url           String
  caption       String

  createdAt     DateTime    @default(now())

  thing         Thing    @relation(fields: [thingId], references: [id])

  @@index([thingId])
}

model Payment {
  id           String    @id @default(cuid())
  thingId     String
  renterId    String
  amount       Float
  paymentDate DateTime    @default(now())

  thingApplication    ThingApplication @relation(fields: [thingId], references: [id])
  renter       User   @relation(fields: [renterId], references: [id])

  @@index([thingId])
  @@index([renterId])
}

model FavoriteThing {
  id          String   @id @default(cuid())
  renterId   String
  thingId   String

  thing      Thing @relation(fields: [thingId], references: [id])
  renter      User   @relation(fields: [renterId], references: [id])

  @@index([thingId])
  @@index([renterId])
}

model SupportRequest {
  id          String      @id @default(cuid())
  thingId   String
  renterId   String
  description String
  requestDate DateTime    @default(now())
  status      String

  thing       Thing @relation(fields: [thingId], references: [id])
  renter       User   @relation(fields: [renterId], references: [id])

  @@index([thingId])
  @@index([renterId])
}

model ThingAdministrator {
  thingId String
  adminId  String

  thing        Thing          @relation(fields: [thingId], references: [id])
  administrator User            @relation(fields: [adminId], references: [id])

  @@id([thingId, adminId])
  @@index([thingId])
  @@index([adminId])
}

// Account model
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Verification token model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

