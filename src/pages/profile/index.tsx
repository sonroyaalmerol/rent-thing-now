import { GetServerSideProps, InferGetServerSidePropsType, NextPage } from 'next';
import Head from 'next/head';

import React from 'react';

import clsx from 'clsx';

import prisma from '@/utils/prisma';
import {
  Profile, Thing, ThingImage, User,
} from '@prisma/client';

import { authOptions } from '@/pages/api/auth/[...nextauth]';
import { getServerSession } from 'next-auth/next';
import trpc from '@/utils/trpc';

export const getServerSideProps: GetServerSideProps<{ user: (User & {
  profile: Profile | null;
  things: (Thing & {
      images: ThingImage[];
  })[];
}) }> = async (context) => {
  const session = await getServerSession(context.req, context.res, authOptions);

  if (!session) {
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    };
  }

  const user = await prisma.user.findUnique({
    where: {
      id: session?.user?.id ?? '',
    },
    include: {
      profile: true,
      things: {
        include: {
          images: true,
        },
      },
    },
  });

  if (!user) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      user,
    },
  };
};

// eslint-disable-next-line no-unused-vars
const ProfilePage: NextPage<
  InferGetServerSidePropsType<typeof getServerSideProps>
> = ({ user }: InferGetServerSidePropsType<typeof getServerSideProps>) => {
  const [editing, setEditing] = React.useState(false);

  const updateProfileMutation = trpc.updateProfile.useMutation();

  const [phoneNumber, setPhoneNumber] = React.useState(user.profile?.phoneNumber ?? '');
  const [address, setAddress] = React.useState(user.profile?.address ?? '');
  const [city, setCity] = React.useState(user.profile?.city ?? '');
  const [state, setState] = React.useState(user.profile?.state ?? '');
  const [country, setCountry] = React.useState(user.profile?.country ?? '');
  const [zip, setZip] = React.useState(user.profile?.zip ?? '');

  const handleButtonClick = () => {
    setEditing((prev) => {
      if (prev) {
        updateProfileMutation.mutate({
          phoneNumber,
          address,
          city,
          state,
          country,
          zip,
        });
      }

      return !prev;
    });
  };

  return (
    <>
      <Head>
        <title>{`${user.name} | Rent Thing Now`}</title>
        <meta
          name="description"
          content="Generated by create next app"
        />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1"
        />
        <link
          rel="icon"
          href="/favicon.ico"
        />
      </Head>
      <div className={
          clsx([
            'sm:mx-auto',
            'max-w-screen-2xl',
            'my-8',
          ])
        }
      >
        <div className="flex flex-row items-center justify-center gap-12">
          <div className="flex flex-col items-center justify-center gap-4">
            <img
              className="object-cover w-32 h-32 rounded-full"
              src={user.image || ''}
              alt="Profile"
              referrerPolicy="no-referrer"
            />
            <h2 className="text-xl font-bold">{user.name}</h2>
            <p className="text-gray-600">{user.email}</p>
            <button
              type="button"
              className="px-4 py-2 text-sm font-semibold text-white bg-blue-500 rounded-md hover:bg-blue-600"
              onClick={handleButtonClick}
            >
              {editing ? 'Save Changes' : 'Edit Profile'}
            </button>
          </div>
          <div className="flex flex-col space-y-1">
            <p className="text-gray-600">
              Phone Number:
              {' '}
              { !editing ? phoneNumber : (
                <input
                  type="text"
                  name="phoneNumber"
                  value={phoneNumber}
                  onChange={(e) => setPhoneNumber(e.target.value)}
                  className="px-4 py-2 text-sm font-semibold text-gray-600 bg-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              )}
            </p>

            <p className="text-gray-600">
              Address:
              {' '}
              { !editing ? address : (
                <input
                  type="text"
                  name="address"
                  value={address}
                  onChange={(e) => setAddress(e.target.value)}
                  className="px-4 py-2 text-sm font-semibold text-gray-600 bg-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              )}
            </p>
            <p className="text-gray-600">
              City:
              {' '}
              { !editing ? city : (
                <input
                  type="text"
                  name="city"
                  value={city}
                  onChange={(e) => setCity(e.target.value)}
                  className="px-4 py-2 text-sm font-semibold text-gray-600 bg-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              )}
            </p>
            <p className="text-gray-600">
              State:
              {' '}
              { !editing ? state : (
                <input
                  type="text"
                  name="state"
                  value={state}
                  onChange={(e) => setState(e.target.value)}
                  className="px-4 py-2 text-sm font-semibold text-gray-600 bg-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              )}
            </p>
            <p className="text-gray-600">
              Zip:
              {' '}
              { !editing ? zip : (
                <input
                  type="text"
                  name="zip"
                  value={zip}
                  onChange={(e) => setZip(e.target.value)}
                  className="px-4 py-2 text-sm font-semibold text-gray-600 bg-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              )}
            </p>
            <p className="text-gray-600">
              Country:
              {' '}
              { !editing ? country : (
                <input
                  type="text"
                  name="country"
                  value={country}
                  onChange={(e) => setCountry(e.target.value)}
                  className="px-4 py-2 text-sm font-semibold text-gray-600 bg-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              )}
            </p>
          </div>
        </div>
      </div>
    </>
  );
};

export default ProfilePage;
