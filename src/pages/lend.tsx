import { GetServerSideProps, InferGetServerSidePropsType, NextPage } from 'next';
import Head from 'next/head';

import React from 'react';

import clsx from 'clsx';
import trpc from '@/utils/trpc';

import prisma from '@/utils/prisma';
import {
  Profile, Thing, ThingImage, User,
} from '@prisma/client';

import { authOptions } from '@/pages/api/auth/[...nextauth]';
import { getServerSession } from 'next-auth/next';
import { useRouter } from 'next/router';
import LendingForm from '@/components/ThingPage/LendingForm';
import { toast } from 'react-hot-toast';

export const getServerSideProps: GetServerSideProps<{ user: (User & {
  profile: Profile | null;
  things: (Thing & {
      images: ThingImage[];
  })[];
}) }> = async (context) => {
  const session = await getServerSession(context.req, context.res, authOptions);

  if (!session) {
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    };
  }

  const user = await prisma.user.findUnique({
    where: {
      id: session?.user?.id ?? '',
    },
    include: {
      profile: true,
      things: {
        include: {
          images: true,
        },
      },
    },
  });

  if (!user) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      user,
    },
  };
};

// eslint-disable-next-line no-unused-vars
const LendPage: NextPage<
  InferGetServerSidePropsType<typeof getServerSideProps>
> = () => {
  const lendThingMutation = trpc.lendThing.useMutation();

  const router = useRouter();

  const handleSubmit = ({
    title,
    description,
    location,
    equipmentType,
    rate,
    quantity,
  }: {
    title: string;
    description: string;
    location: string;
    equipmentType: string;
    rate: number;
    quantity: number;
  }) => {
    lendThingMutation.mutate({
      title,
      description,
      location,
      equipmentType,
      rate,
      quantity,
    });
  };

  React.useEffect(() => {
    if (lendThingMutation.isSuccess) {
      const thing = lendThingMutation.data;
      toast.success('Thing successfully created!');
      router.push(`/things/${thing.slug}/manage`);
    } else if (lendThingMutation.isError) {
      toast.error('Something went wrong. Please try again.');
    }
  }, [lendThingMutation.data, lendThingMutation.isError, lendThingMutation.isSuccess, router]);

  return (
    <>
      <Head>
        <title>Lending Form | Rent Thing Now</title>
        <meta
          name="description"
          content="Generated by create next app"
        />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1"
        />
        <link
          rel="icon"
          href="/favicon.ico"
        />
      </Head>
      <div className={
        clsx([
          'sm:mx-auto',
          'max-w-screen-lg',
          'my-8',
        ])
      }
      >
        <h1 className="mb-4 text-3xl font-bold text-gray-900">
          Lend a Thing
        </h1>
        <LendingForm
          onSubmit={handleSubmit}
        />
      </div>
    </>
  );
};

export default LendPage;
